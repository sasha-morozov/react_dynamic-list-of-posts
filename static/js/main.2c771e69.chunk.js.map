{"version":3,"sources":["components/PostsList/PostsList.tsx","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","props","posts","getPostId","selectedPostId","className","map","post","userId","title","type","onClick","postID","id","API_URL","request","url","a","options","fetch","response","ok","Error","status","statusText","json","NewCommentForm","onAdd","useState","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","postId","value","onChange","target","placeholder","PostDetails","selectedPost","setSelectedPost","comments","setComments","isCommentVisible","setIsCommentVisible","useEffect","postDetailsFromAPI","postCommentsFromAPI","removeComment","method","currentComments","filter","comment","addNewComment","newComment","headers","JSON","stringify","commentAPI","curComments","prevState","App","setPosts","users","setUsers","selectedUserId","setSelectedUserId","setSelectedPostId","loadUsers","usersFromApi","loadPosts","postsFromServer","selectedPosts","newValue","Number","user","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c771e69.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[];\n  getPostId: (postId: number) => void;\n  selectedPostId: number;\n}\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const {\n    posts,\n    getPostId,\n    selectedPostId,\n  } = props;\n\n  const handleClick = (postID: number) => {\n    if (selectedPostId === postID) {\n      getPostId(0);\n    } else {\n      getPostId(postID);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>\n                {`[User ${post.userId} ]:`}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleClick(post.id)}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const API_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string, options = {}) => {\n  const response = await fetch(`${API_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const getPosts = () => request('/posts');\nexport const getUserPosts = (userId: number) => request(`/posts?userId=${userId}`);\nexport const getUsers = () => request('/users');\nexport const getPostsDetails = (postID: number) => request(`/posts/${postID}`);\nexport const getComments = (postID: number) => request(`/comments?postId=${postID}`);\nexport const removeCommentById = (commentID: number) => request(`/comments/${commentID}`, { method: 'DELETE' });\nexport const addComment = (newComment: Partial<Comment>) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  onAdd: (comment: Partial<Comment>) => void;\n  selectedPostId: number;\n}\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { onAdd, selectedPostId } = props;\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAdd({\n      name,\n      body,\n      email,\n      postId: selectedPostId,\n    });\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          onChange={(event) => setBody(event.target.value)}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport {\n  getPostsDetails,\n  getComments,\n  removeCommentById,\n  addComment,\n} from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { selectedPostId } = props;\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentVisible, setIsCommentVisible] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      const postDetailsFromAPI = await getPostsDetails(selectedPostId);\n\n      setSelectedPost(postDetailsFromAPI);\n    })();\n\n    (async () => {\n      const postCommentsFromAPI = await getComments(selectedPostId);\n\n      setComments(postCommentsFromAPI);\n    })();\n  }, [selectedPostId]);\n\n  const removeComment = async (id: number) => {\n    await removeCommentById(id);\n\n    setComments((currentComments) => currentComments.filter(comment => comment.id !== id));\n  };\n\n  const addNewComment = async (comment: Partial<Comment>) => {\n    const commentAPI = await addComment(comment);\n\n    setComments((curComments) => [...curComments, commentAPI]);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsCommentVisible(prevState => !prevState);\n          }}\n        >\n          {isCommentVisible ? 'Hide' : 'Show'}\n        </button>\n\n        {isCommentVisible && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  onClick={() => removeComment(comment.id)}\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            onAdd={addNewComment}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts, getUsers } from './api/posts';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const loadUsers = async () => {\n    const usersFromApi = await getUsers();\n\n    setUsers(usersFromApi);\n  };\n\n  const loadPosts = async () => {\n    if (selectedUserId === 0) {\n      const postsFromServer = await getPosts();\n\n      setPosts(postsFromServer);\n\n      return;\n    }\n\n    const selectedPosts = await getUserPosts(selectedUserId);\n\n    setPosts(selectedPosts);\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const newValue = Number(event.target.value);\n\n    setSelectedUserId(newValue);\n  };\n\n  const getPostId = (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            name=\"selectedUserId\"\n            value={selectedUserId}\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n            {users?.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {posts.length > 0 ? (\n            <PostsList\n              posts={posts}\n              selectedPostId={selectedPostId}\n              getPostId={getPostId}\n            />\n          ) : ('No posts')}\n        </div>\n\n        {selectedPostId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}